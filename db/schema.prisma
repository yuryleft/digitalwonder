// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgres"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

// --------------------------------------
model User {
  id             Int      @id @default(autoincrement())
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  name           String?
  email          String   @unique
  hashedPassword String?
  role           String   @default("USER")

  tokens   Token[]
  sessions Session[]
}

model Session {
  id                 Int       @id @default(autoincrement())
  createdAt          DateTime  @default(now())
  updatedAt          DateTime  @updatedAt
  expiresAt          DateTime?
  handle             String    @unique
  hashedSessionToken String?
  antiCSRFToken      String?
  publicData         String?
  privateData        String?

  user   User? @relation(fields: [userId], references: [id])
  userId Int?
}

model Token {
  id          Int      @id @default(autoincrement())
  createdAt   DateTime @default(now())
  updatedAt   DateTime @updatedAt
  hashedToken String
  type        String
  // See note below about TokenType enum
  // type        TokenType
  expiresAt   DateTime
  sentTo      String

  user   User @relation(fields: [userId], references: [id])
  userId Int

  @@unique([hashedToken, type])
}

// NOTE: It's highly recommended to use an enum for the token type
//       but enums only work in Postgres.
//       See: https://blitzjs.com/docs/database-overview#switch-to-postgre-sql
// enum TokenType {
//   RESET_PASSWORD
// }

model Product {
  id        Int         @id @default(autoincrement())
  title     String
  type      ProductType @relation(fields: [typeId], references: [id])
  typeId    Int
  logo      String?
  order     Int         @default(autoincrement())
  longdesc  String?
  shortdesc String?

  Variable_value Variable_value[]
}

model ProductType {
  id    Int    @id @default(autoincrement())
  title String
  order Int    @default(autoincrement())

  Product     Product[]
  Field_group Field_group[]
}

model Product_variable {
  id       Int         @id @default(autoincrement())
  title    String
  group    Field_group @relation(fields: [id_group], references: [id])
  id_group Int         @default(1)
  unit     String      @default("")
  order    Int         @default(autoincrement())

  Variable_value Variable_value[]
}

model Variable_value {
  id          Int              @id @default(autoincrement())
  variable    Product_variable @relation(fields: [id_variable], references: [id], onDelete: Cascade)
  id_variable Int
  product     Product          @relation(fields: [id_product], references: [id], onDelete: Cascade)
  id_product  Int
  value       String?
  order       Int              @default(autoincrement())

  @@unique([id_product, id_variable])
}

model Field_group {
  id     Int         @id @default(autoincrement())
  type   ProductType @relation(fields: [typeId], references: [id])
  typeId Int
  title  String
  order  Int         @default(autoincrement())

  Product_variable Product_variable[]
}
